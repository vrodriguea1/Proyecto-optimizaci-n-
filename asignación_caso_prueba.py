# -*- coding: utf-8 -*-
"""Asignación caso prueba.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18YxErA_-AS6oZMQrNzgj8U6RY2FjNARC
"""

#imports
#Se debe correr dos veces para que haga los imports
!pip install ortools
from ortools.linear_solver import pywraplp
import pandas as pd
from google.colab import files
import io

#Cargar el excel con los datos
a=files.upload()

B1 = pd.read_excel ('Asignación de cursos a profesores.xlsx', sheet_name='B')
I1 = pd.read_excel ('Asignación de cursos a profesores.xlsx', sheet_name='I')
G1 = pd.read_excel ('Asignación de cursos a profesores.xlsx', sheet_name='G')
K1 = pd.read_excel ('Asignación de cursos a profesores.xlsx', sheet_name='K')
J1 = pd.read_excel ('Asignación de cursos a profesores.xlsx', sheet_name='J')
F1 = pd.read_excel ('Asignación de cursos a profesores.xlsx', sheet_name='F')

#pasar los dataframes de pandas a arreglos
B2=B1.drop(B1.columns[[0]],axis=1)
I2=I1.drop(I1.columns[[0]],axis=1)
G2=G1.drop(G1.columns[[0]],axis=1)
K2=K1.drop(K1.columns[[0]],axis=1)
J2=J1.drop(J1.columns[[0]],axis=1)
J2=J1.drop(0)
J3=J2.drop(1)
J4=J3.drop(J1.columns[[0]],axis=1)
F2=F1.drop(F1.columns[[0]],axis=1)
B=B2.to_numpy()
I=I2.to_numpy()
G=G2.to_numpy()
K=K2.to_numpy()
J=J4.to_numpy()
F=F2.to_numpy()

#solver

solver = pywraplp.Solver.CreateSolver('SCIP')
profesores=len(B[1])
cursos=len(B)
horarios=len(J[2])

#Creción variables de decisión
X = {}
for j in range(profesores):
  for i in range(cursos):
    X[i, j] = solver.IntVar(0, 1, '')
#[ (i, j) ] = solver.IntVar(0, 0, "X {} {}".format(i, j))  


#Función objetivo
objective_terms = []

for i in range(cursos):
    for j in range(profesores):
        objective_terms.append(K[i,j]*X[i, j])
solver.Maximize(solver.Sum(objective_terms))

#Restricciones sin límite por tiempo pero restricción de cantidad de cursos
for i in range(cursos):
  solver.Add(solver.Sum([X[i,j]*B[i,j] for j in range(profesores)]) <= 1)

for j in range(profesores):
  solver.Add(solver.Sum([X[i,j]*G[j,0]*(1-F[i,j]) for i in range(cursos)]) <= 1)

for j in range(profesores):
  solver.Add(solver.Sum([X[i,j]*B[i,j] for i in range(cursos)]) <= 1)

#Resultados
status = solver.Solve()
if status == pywraplp.Solver.OPTIMAL or status == pywraplp.Solver.FEASIBLE:
    print('Satisfacción total= ', solver.Objective().Value(), '\n')

professs=[]
cursoss=[]
for i in range(cursos):
      for j in range(profesores):
          if X[i, j].solution_value() > 0.5:
              professs.append(j)
              cursoss.append(i)
              print('Curso %d asignado a profesor %d.  Sat = %d' %
                        (i, j, K[i][j]))

#limpiar solver
solver.Clear()